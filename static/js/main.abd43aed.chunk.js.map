{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","value","onChange","target","ref","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","useEffect","current","focus","Form","setName","addTask","autoComplete","FilterButton","aria-pressed","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","filterList","map","tasksNoun","length","headingText","updatedTasks","remainingTasks","editedTaskList","taskList","newTask","nanoid","role","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abd43aed.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect} from \"react\";\n\nexport default function Todo(props){\n  const [isEditing, setEditing] =useState(false);\n  const [newName, setNewName] = useState('')\n\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n\n  function handleChange(e){\n    setNewName(e.target.value);\n  }\n  function handleSubmit(e){\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const editingTemplate = (\n  <form className=\"stack-small\" onSubmit={handleSubmit}>\n    <div className=\"form-group\">\n      <label className=\"todo-label\" htmlFor={props.id}>\n        New name for {props.name}\n      </label>\n      <input\n        id={props.id}\n        className=\"todo-text\"\n        type=\"text\"\n        value = {newName}\n        onChange={handleChange}\n        ref = {editFieldRef}\n      />\n    </div>\n    <div className=\"btn-group\">\n      <button\n        type=\"button\"\n        className=\"btn todo-cancel\"\n        onClick={() => setEditing(false)}\n      >\n        Cancel\n        <span className=\"visually-hidden\">renaming {props.name}</span>\n      </button>\n      <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n        Save\n        <span className=\"visually-hidden\">new name for {props.name}</span>\n      </button>\n    </div>\n  </form>\n  );\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n          />\n          <label className=\"todo-label\" htmlFor={props.id}>\n            {props.name}\n          </label>\n        </div>\n        <div className=\"btn-group\">\n          <button\n            type=\"button\"\n            className=\"btn\"\n            onClick={() => setEditing(true)}\n            ref = {editButtonRef}\n          >\n            Edit <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn__danger\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n        </div>\n    </div>\n  );\n\n  useEffect(()=>{\n    if (isEditing){\n      editFieldRef.current.focus();\n    }\n  }, [isEditing]);\n\n  // return (\n  //   <li className=\"todo stack-small\">\n  //     <div className=\"c-cb\">\n  //       <input\n  //         id= {props.id}\n  //         type=\"checkbox\"\n  //         defaultChecked={props.completed}\n  //         onChange = {() => props.toggleTaskCompleted(props.id)}\n  //        />\n  //       <label className=\"todo-label\" htmlFor={props.id}>\n  //         {props.name}\n  //       </label>\n  //     </div>\n  //     <div className=\"btn-group\">\n  //       <button type=\"button\" className=\"btn\">\n  //         Edit <span className=\"visually-hidden\">{props.name}</span>\n  //       </button>\n  //       <button\n  //         type=\"button\"\n  //         className=\"btn btn__danger\"\n  //         onClick = {() => props.deleteTask(props.id)}\n  //       >\n  //         Delete <span className=\"visually-hidden\">{props.name}</span>\n  //       </button>\n  //     </div>\n  //   </li>\n  //\n  // );\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n}\n","import React, {useState } from 'react'\n\nexport default function Form(props){\n\n  const [name, setName] = useState('');\n\n  function handleSubmit(e){\n    e.preventDefault();\n    if(name !== \"\"){\n      props.addTask(name);\n    }\n    setName(\"\");\n  }\n\n  function handleChange(e){\n    setName(e.target.value)\n  }\n\n  return (\n    <form onSubmit = {handleSubmit}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        </label>\n      </h2>\n      <input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value = {name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  )\n}\n","import React from 'react'\n\nexport default function FilterButton(props){\n  return (\n    <button\n      type=\"button\"\n      className=\"btn toggle-btn\"\n      aria-pressed={props.isPressed}\n      onClick = {() => props.setFilter(props.name)}\n    >\n      <span className=\"visually-hidden\">Show </span>\n      <span>{props.name}</span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  )\n}\n","import React, {useState} from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport {nanoid} from \"nanoid\";\n\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed = {name === filter}\n      setFilter = {setFilter}\n    />\n  ));\n\n  const tasksNoun = tasks.length !==1 ? 'tasks':'task';\n  const headingText = `${tasks.length} ${tasksNoun} tasks remaining`;\n\n  function toggleTaskCompleted(id){\n    const updatedTasks = tasks.map(task =>{\n      if(id === task.id){\n        return{...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  function deleteTask(id){\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function addTask(name){\n    const newTask={id: \"todo-\"+nanoid(), name:name, completed:false};\n    setTasks([...tasks, newTask]);\n  }\n\n  function editTask(id, newName){\n    const editedTaskList = tasks.map(task =>{\n      if(id === task.id){\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.filter(\n    FILTER_MAP[filter]\n  ).map(task =>(\n      <Todo\n        id = {task.id}\n        name = {task.name}\n        completed = {task.completed}\n        key = {task.id}\n        toggleTaskCompleted = {toggleTaskCompleted}\n        deleteTask = {deleteTask}\n        editTask={editTask}\n      />\n  ))\n\n\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n        <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        {filterList }\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"build a rocket with less than 10 bux\", completed: true },\n  { id: \"todo-1\", name: \"perform self improvement, i.e: mastubation\", completed: false },\n  { id: \"todo-2\", name: \"send more zombies to alex cause she wants sumg\", completed: false }\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}