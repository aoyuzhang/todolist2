{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","value","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","addTask","autoComplete","FilterButton","aria-pressed","App","tasks","setTasks","tasksNoun","length","headingText","updatedTasks","map","task","remainingTasks","filter","editedTaskList","taskList","newTask","nanoid","role","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07cbc61d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Todo(props){\n  const [isEditing, setEditing] =useState(false);\n  const [newName, setNewName] = useState('')\n\n  function handleChange(e){\n    setNewName(e.target.value);\n  }\n  function handleSubmit(e){\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const editingTemplate = (\n  <form className=\"stack-small\" onSubmit={handleSubmit}>\n    <div className=\"form-group\">\n      <label className=\"todo-label\" htmlFor={props.id}>\n        New name for {props.name}\n      </label>\n      <input\n        id={props.id}\n        className=\"todo-text\"\n        type=\"text\"\n        value = {newName}\n        onChange={handleChange}\n      />\n    </div>\n    <div className=\"btn-group\">\n      <button\n        type=\"button\"\n        className=\"btn todo-cancel\"\n        onClick={() => setEditing(false)}\n      >\n        Cancel\n        <span className=\"visually-hidden\">renaming {props.name}</span>\n      </button>\n      <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n        Save\n        <span className=\"visually-hidden\">new name for {props.name}</span>\n      </button>\n    </div>\n  </form>\n  );\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n          />\n          <label className=\"todo-label\" htmlFor={props.id}>\n            {props.name}\n          </label>\n        </div>\n        <div className=\"btn-group\">\n          <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\n            Edit <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn__danger\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n        </div>\n    </div>\n  );\n\n  // return (\n  //   <li className=\"todo stack-small\">\n  //     <div className=\"c-cb\">\n  //       <input\n  //         id= {props.id}\n  //         type=\"checkbox\"\n  //         defaultChecked={props.completed}\n  //         onChange = {() => props.toggleTaskCompleted(props.id)}\n  //        />\n  //       <label className=\"todo-label\" htmlFor={props.id}>\n  //         {props.name}\n  //       </label>\n  //     </div>\n  //     <div className=\"btn-group\">\n  //       <button type=\"button\" className=\"btn\">\n  //         Edit <span className=\"visually-hidden\">{props.name}</span>\n  //       </button>\n  //       <button\n  //         type=\"button\"\n  //         className=\"btn btn__danger\"\n  //         onClick = {() => props.deleteTask(props.id)}\n  //       >\n  //         Delete <span className=\"visually-hidden\">{props.name}</span>\n  //       </button>\n  //     </div>\n  //   </li>\n  //\n  // );\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n}\n","import React, {useState } from 'react'\n\nexport default function Form(props){\n\n  const [name, setName] = useState('');\n\n  function handleSubmit(e){\n    e.preventDefault();\n    if(name !== \"\"){\n      props.addTask(name);\n    }\n    setName(\"\");\n  }\n\n  function handleChange(e){\n    setName(e.target.value)\n  }\n\n  return (\n    <form onSubmit = {handleSubmit}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        </label>\n      </h2>\n      <input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value = {name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  )\n}\n","import React from 'react'\n\nexport default function FilterButton(props){\n  return (\n    <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\">\n      <span className=\"visually-hidden\">Show </span>\n      <span>all</span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  )\n}\n","import React, {useState} from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport {nanoid} from \"nanoid\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n\n  const tasksNoun = tasks.length !==1 ? 'tasks':'task';\n  const headingText = `${tasks.length} ${tasksNoun} tasks remaining`;\n\n  function toggleTaskCompleted(id){\n    const updatedTasks = tasks.map(task =>{\n      if(id === task.id){\n        return{...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  function deleteTask(id){\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function addTask(name){\n    const newTask={id: \"todo-\"+nanoid(), name:name, completed:false};\n    setTasks([...tasks, newTask]);\n  }\n\n  function editTask(id, newName){\n    const editedTaskList = tasks.map(task =>{\n      if(id === task.id){\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.map(task =>\n    (<Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key = {task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask = {deleteTask}\n      editTask={editTask}\n    />));\n\n\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n        <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        <FilterButton />\n        <FilterButton />\n        <FilterButton />\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"build a rocket with less than 10 bux\", completed: true },\n  { id: \"todo-1\", name: \"perform self improvement, i.e: mastubation\", completed: false },\n  { id: \"todo-2\", name: \"send more zombies to alex cause she wants sumg\", completed: false }\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}