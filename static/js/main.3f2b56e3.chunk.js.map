{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","className","id","type","defaultChecked","completed","onChange","toggleTaskCompleted","htmlFor","name","Form","useState","setName","onSubmit","e","preventDefault","addTask","autoComplete","value","target","FilterButton","aria-pressed","App","tasks","setTasks","tasksNoun","length","headingText","updatedTasks","map","task","taskList","newTask","nanoid","role","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAEe,SAASA,EAAKC,GAC3B,OACE,qBAAIC,UAAU,mBAAd,UACE,sBAAKA,UAAU,OAAf,UACE,uBACEC,GAAKF,EAAME,GACXC,KAAK,WACLC,eAAgBJ,EAAMK,UACtBC,SAAY,kBAAMN,EAAMO,oBAAoBP,EAAME,OAEpD,uBAAOD,UAAU,aAAaO,QAASR,EAAME,GAA7C,SACGF,EAAMS,UAGX,sBAAKR,UAAU,YAAf,UACE,yBAAQE,KAAK,SAASF,UAAU,MAAhC,kBACO,sBAAMA,UAAU,kBAAhB,SAAmCD,EAAMS,UAEhD,yBAAQN,KAAK,SAASF,UAAU,kBAAhC,oBACS,sBAAMA,UAAU,kBAAhB,SAAmCD,EAAMS,gBCnB3C,SAASC,EAAKV,GAE3B,MAAwBW,mBAAS,IAAjC,mBAAOF,EAAP,KAAaG,EAAb,KAcA,OACE,uBAAMC,SAbR,SAAsBC,GACpBA,EAAEC,iBACU,KAATN,GACDT,EAAMgB,QAAQP,GAEhBG,EAAQ,KAQR,UACE,oBAAIX,UAAU,gBAAd,SACE,uBAAOO,QAAQ,iBAAiBP,UAAU,YAA1C,sCAIF,uBACEE,KAAK,OACLD,GAAG,iBACHD,UAAU,kBACVQ,KAAK,OACLQ,aAAa,MACbC,MAAST,EACTH,SAlBN,SAAsBQ,GACpBF,EAAQE,EAAEK,OAAOD,UAmBf,wBAAQf,KAAK,SAASF,UAAU,2BAAhC,oBChCS,SAASmB,EAAapB,GACnC,OACE,yBAAQG,KAAK,SAASF,UAAU,iBAAiBoB,eAAa,OAA9D,UACE,sBAAMpB,UAAU,kBAAhB,mBACA,uCACA,sBAAMA,UAAU,kBAAhB,uB,WCqDSqB,MAtDf,SAAatB,GACX,MAA0BW,mBAASX,EAAMuB,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KAEMC,EAA4B,IAAhBF,EAAMG,OAAc,QAAQ,OACxCC,EAAW,UAAMJ,EAAMG,OAAZ,YAAsBD,EAAtB,oBAEjB,SAASlB,EAAoBL,GAC3B,IAAM0B,EAAeL,EAAMM,KAAI,SAAAC,GAC7B,OAAG5B,IAAO4B,EAAK5B,GACb,2BAAU4B,GAAV,IAAgBzB,WAAYyB,EAAKzB,YAE5ByB,KAETN,EAASI,GAOX,IAAMG,EAAWR,EAAMM,KAAI,SAAAC,GAAI,OAC5B,cAAC/B,EAAD,CACCG,GAAI4B,EAAK5B,GACTO,KAAMqB,EAAKrB,KACXJ,UAAWyB,EAAKzB,UAEhBE,oBAAqBA,GADduB,EAAK5B,OAMhB,OACE,sBAAKD,UAAU,sBAAf,UACE,2CACE,cAACS,EAAD,CAAMM,QAlBZ,SAAiBP,GACf,IAAMuB,EAAQ,CAAC9B,GAAI,QAAQ+B,cAAUxB,KAAKA,EAAMJ,WAAU,GAC1DmB,EAAS,GAAD,mBAAKD,GAAL,CAAYS,QAiBlB,sBAAK/B,UAAU,oCAAf,UACE,cAACmB,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,OAEF,oBAAIlB,GAAG,eAAP,SACGyB,IAEH,oBACEO,KAAK,OACLjC,UAAU,wCACVkC,kBAAgB,eAHlB,SAKGJ,QC1CMK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKxB,MARI,CACX,CAAErB,GAAI,SAAUO,KAAM,MAAOJ,WAAW,GACxC,CAAEH,GAAI,SAAUO,KAAM,QAASJ,WAAW,GAC1C,CAAEH,GAAI,SAAUO,KAAM,SAAUJ,WAAW,QAO3C2C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3f2b56e3.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Todo(props){\n  return (\n    <li className=\"todo stack-small\">\n      <div className=\"c-cb\">\n        <input\n          id= {props.id}\n          type=\"checkbox\"\n          defaultChecked={props.completed}\n          onChange = {() => props.toggleTaskCompleted(props.id)}\n         />\n        <label className=\"todo-label\" htmlFor={props.id}>\n          {props.name}\n        </label>\n      </div>\n      <div className=\"btn-group\">\n        <button type=\"button\" className=\"btn\">\n          Edit <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n        <button type=\"button\" className=\"btn btn__danger\">\n          Delete <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n      </div>\n    </li>\n\n  );\n}\n","import React, {useState } from 'react'\n\nexport default function Form(props){\n\n  const [name, setName] = useState('');\n\n  function handleSubmit(e){\n    e.preventDefault();\n    if(name !== \"\"){\n      props.addTask(name);\n    }\n    setName(\"\");\n  }\n\n  function handleChange(e){\n    setName(e.target.value)\n  }\n\n  return (\n    <form onSubmit = {handleSubmit}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        </label>\n      </h2>\n      <input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value = {name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  )\n}\n","import React from 'react'\n\nexport default function FilterButton(props){\n  return (\n    <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\">\n      <span className=\"visually-hidden\">Show </span>\n      <span>all</span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  )\n}\n","import React, {useState} from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport {nanoid} from \"nanoid\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n\n  const tasksNoun = tasks.length !==1 ? 'tasks':'task';\n  const headingText = `${tasks.length} ${tasksNoun} tasks remaining`;\n\n  function toggleTaskCompleted(id){\n    const updatedTasks = tasks.map(task =>{\n      if(id === task.id){\n        return{...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function addTask(name){\n    const newTask={id: \"todo-\"+nanoid(), name:name, completed:false};\n    setTasks([...tasks, newTask]);\n  }\n  const taskList = tasks.map(task =>\n    (<Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key = {task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n    />));\n\n\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n        <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        <FilterButton />\n        <FilterButton />\n        <FilterButton />\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}