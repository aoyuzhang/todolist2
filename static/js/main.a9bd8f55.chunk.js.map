{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","id","name","completed","className","type","defaultChecked","onChange","toggleTaskCompleted","htmlFor","onClick","deleteTask","Form","setName","onSubmit","e","preventDefault","addTask","autoComplete","value","target","FilterButton","aria-pressed","App","tasks","setTasks","tasksNoun","length","headingText","updatedTasks","map","task","remainingTasks","filter","editTask","newName","editedTaskList","taskList","newTask","nanoid","role","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9bd8f55.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Todo(props){\n  const [isEditing, setEditing] =useState(false);\n\n  const editingTemplate = (\n  <form className=\"stack-small\">\n    <div className=\"form-group\">\n      <label className=\"todo-label\" htmlFor={props.id}>\n        New name for {props.name}\n      </label>\n      <input id={props.id} className=\"todo-text\" type=\"text\" />\n    </div>\n    <div className=\"btn-group\">\n      <button type=\"button\" className=\"btn todo-cancel\">\n        Cancel\n        <span className=\"visually-hidden\">renaming {props.name}</span>\n      </button>\n      <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n        Save\n        <span className=\"visually-hidden\">new name for {props.name}</span>\n      </button>\n    </div>\n  </form>\n  );\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n          />\n          <label className=\"todo-label\" htmlFor={props.id}>\n            {props.name}\n          </label>\n        </div>\n        <div className=\"btn-group\">\n          <button type=\"button\" className=\"btn\">\n            Edit <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn__danger\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n        </div>\n    </div>\n  );\n\n  return (\n    <li className=\"todo stack-small\">\n      <div className=\"c-cb\">\n        <input\n          id= {props.id}\n          type=\"checkbox\"\n          defaultChecked={props.completed}\n          onChange = {() => props.toggleTaskCompleted(props.id)}\n         />\n        <label className=\"todo-label\" htmlFor={props.id}>\n          {props.name}\n        </label>\n      </div>\n      <div className=\"btn-group\">\n        <button type=\"button\" className=\"btn\">\n          Edit <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn__danger\"\n          onClick = {() => props.deleteTask(props.id)}\n        >\n          Delete <span className=\"visually-hidden\">{props.name}</span>\n        </button>\n      </div>\n    </li>\n\n  );\n}\n","import React, {useState } from 'react'\n\nexport default function Form(props){\n\n  const [name, setName] = useState('');\n\n  function handleSubmit(e){\n    e.preventDefault();\n    if(name !== \"\"){\n      props.addTask(name);\n    }\n    setName(\"\");\n  }\n\n  function handleChange(e){\n    setName(e.target.value)\n  }\n\n  return (\n    <form onSubmit = {handleSubmit}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        </label>\n      </h2>\n      <input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value = {name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  )\n}\n","import React from 'react'\n\nexport default function FilterButton(props){\n  return (\n    <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\">\n      <span className=\"visually-hidden\">Show </span>\n      <span>all</span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  )\n}\n","import React, {useState} from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport {nanoid} from \"nanoid\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n\n  const tasksNoun = tasks.length !==1 ? 'tasks':'task';\n  const headingText = `${tasks.length} ${tasksNoun} tasks remaining`;\n\n  function toggleTaskCompleted(id){\n    const updatedTasks = tasks.map(task =>{\n      if(id === task.id){\n        return{...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  function deleteTask(id){\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function addTask(name){\n    const newTask={id: \"todo-\"+nanoid(), name:name, completed:false};\n    setTasks([...tasks, newTask]);\n  }\n\n  function editTask(id, newName){\n    const editedTaskList = tasks.map(task =>{\n      if(id === task.id){\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.map(task =>\n    (<Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key = {task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask = {deleteTask}\n      editTask={editTask}\n    />));\n\n\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n        <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        <FilterButton />\n        <FilterButton />\n        <FilterButton />\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"build a rocket with less than 10 bux\", completed: true },\n  { id: \"todo-1\", name: \"perform self improvement, i.e: mastubation\", completed: false },\n  { id: \"todo-2\", name: \"send more zombies to alex cause she wants sumg\", completed: false }\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}